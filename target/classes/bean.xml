<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--把对象的创建交给spring来管理-->
    <!--spring对bean的管理细节
        1.创建bean的三种方式
        2.bean对象的作用范围
        3.bean对象的生命周期
    -->

    <!--创建Bean的三种方式 -->
    <!-- 第一种方式：使用默认构造函数创建。
            在spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时。
            采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建。

    <bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl"></bean>
    -->

    <!-- 第二种方式： 使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）
    <bean id="instanceFactory" class="com.itheima.factory.InstanceFactory"></bean>
    <bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"></bean>
    -->

    <!-- 第三种方式：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器)
    <bean id="accountService" class="com.itheima.factory.StaticFactory" factory-method="getAccountService"></bean>
    -->

    <!-- bean的作用范围调整
        bean标签的scope属性：
            作用：用于指定bean的作用范围
            取值： 常用的就是单例的和多例的
                singleton：单例的（默认值）
                prototype：多例的
                request：作用于web应用的请求范围
                session：作用于web应用的会话范围
                global-session：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session

    <bean id="accountService" class="com.itheima.service.impl.AccountServiceImpl" scope="prototype"></bean>
    -->

    <!-- bean对象的生命周期
            单例对象
                出生：当容器创建时对象出生
                活着：只要容器还在，对象一直活着
                死亡：容器销毁，对象消亡
                总结：单例对象的生命周期和容器相同
            多例对象
                出生：当我们使用对象时spring框架为我们创建
                活着：对象只要是在使用过程中就一直活着。
                死亡：当对象长时间不用，且没有别的对象引用时，由Java的垃圾回收器回收
     -->
    <bean id="accountDao" class="com.newsoftdemo.day01.dao.impl.AccountDaoImpl"></bean>
    <bean id="accountService" class="com.newsoftdemo.day01.service.impl.AccountService5Impl"></bean>
    <bean id="accountService2" class="com.newsoftdemo.day01.service.impl.AccountService6Impl"></bean>
    <!-- 通过引用实例创建bean -->
    <bean id="beanFactoryMethod" class="com.newsoftdemo.day01.factory.BeanFactoryMethod"></bean>
    <bean id="accountService3" factory-bean="beanFactoryMethod" factory-method="getAccountService"></bean>
    <!-- 通过类静态方法 -->
    <bean id="accountService4" class="com.newsoftdemo.day01.factory.BeanFactoryMethod" factory-method="getStaticAccountService"></bean>
    <!-- 生命周期 -->
    <bean id="accountService81" class="com.newsoftdemo.day01.service.impl.AccountService8Impl" init-method="AccountService8Init" destroy-method="AccountService8Destroy"></bean>
    <bean id="accountService82" class="com.newsoftdemo.day01.service.impl.AccountService8Impl"  scope="prototype" init-method="AccountService8Init" destroy-method="AccountService8Destroy"></bean>
    <!-- 依赖注入 -->
    <!-- spring中的依赖注入
        依赖注入：
            Dependency Injection
        IOC的作用：
            降低程序间的耦合（依赖关系）
        依赖关系的管理：
            以后都交给spring来维护
        在当前类需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明
        依赖关系的维护：
            就称之为依赖注入。
         依赖注入：
            能注入的数据：有三类
                基本类型和String
                其他bean类型（在配置文件中或者注解配置过的bean）
                复杂类型/集合类型
             注入的方式：有三种
                第一种：使用构造函数提供
                第二种：使用set方法提供
                第三种：使用注解提供（明天的内容）
     -->

    <!--构造函数注入：
        使用的标签:constructor-arg
        标签出现的位置：bean标签的内部
        标签中的属性
            type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型
            index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引的位置是从0开始
            name：用于指定给构造函数中指定名称的参数赋值                                        常用的
            =============以上三个用于指定给构造函数中哪个参数赋值===============================
            value：用于提供基本类型和String类型的数据
            ref：用于指定其他的bean类型数据。它指的就是在spring的Ioc核心容器中出现过的bean对象

        优势：
            在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功。
        弊端：
            改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供。
    -->
    <!-- 构造注入.包装类型 -->
    <bean id="sdf" class="java.text.SimpleDateFormat">
        <constructor-arg name="pattern" value="yyyy-MM-dd"></constructor-arg>
    </bean>
    <!-- 简单日期格式 -->
    <bean id="bean_birthday" class="java.util.Date"></bean>
    <!-- 通过简单日期格式parse方法返回日期 -->
    <bean id="bean_birthday_assign" factory-bean="sdf" factory-method="parse">
        <constructor-arg name="source" value="2019-10-01"></constructor-arg>
    </bean>
    <bean id="accountService91" class="com.newsoftdemo.day01.service.impl.AccountService9Impl">
        <constructor-arg name="name" value="纳纳渔科技"></constructor-arg>
        <constructor-arg name="age" value="28"></constructor-arg>
        <constructor-arg name="birthday" ref="bean_birthday_assign"></constructor-arg>
    </bean>

</beans>